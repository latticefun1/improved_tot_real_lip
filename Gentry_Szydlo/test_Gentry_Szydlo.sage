##########
# Copyright 2024, Guilhem Mureau, Alice Pellet-Mary, Heorhii Pliatsok,
# Alexandre Wallet

# This file is part of the algorithm to solve Module-LIP in rank 2
# over totally real fields, called for referencing reason
# ModLipAttack. ModLipAttack is free software: you can redistribute it
# and/or modify it under the terms of the GNU Affero Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.  ModLipAttack is
# distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero Public License
# for more details.  You should have received a copy of the GNU Affero
# Public License along with ModLipAttack. If not, see
# <https://www.gnu.org/licenses/>

##########

##############################################
## This file contains functions to test the function gentry_szydlo
## from the file Gentry_Szydlo.sage
## You might want to modify this file at two places:
##  - the quantity pari_size_max should be replaced by the maximum amount 
## of RAM you can spare for the computation. The default value is 4 GB
##  - if you have an installation of pari/gp on your computer which has 
## version 2.16.x or later AND if your installation of sagemath has access
## to a version of pari which is 2.15.x or before (you can check this by 
## running pari.version() in sage), you may want to use the most recent 
## version of pari/gp for the computation, which contains an implementation 
## of the flatter LLL algorithm (this improves computation time by roughly 
## 20/30% for reasonnable dimensions). To use your most recent installation
## of pari/gp, replace the line path_to_pari = None, by the actual path to 
## your gp executable. If you do so, you might also want to modify the
## default parisizemax and threadsizemax in the file LLL_gram_pari.gp
## (more information about these parameters in the file LLL_gram_pari.gp)
##############################################

import time
load("Gentry_Szydlo.sage")

###################################################
## You may want to modify the two quantities below
####################################################
## Update the two quantities below to fit your machine
pari_size_max = 4*2^30 ## 2^30 is a Go of memory -> update this value, depending on how much RAM you can spare for the computation. Pari will not allocate all this memory by default, but it will increase the size of its memory if needed, until reaching this maximum. If the code crashes with a "PARI stack overflows" error, consider increasing this value.

path_to_pari = None ## Update here with your own path to gp if you want to use a specific version of pari, e.g., path_to_pari = "~/pari/GPDIR/bin/gp" 

########################
## Running the tests
########################

pari.allocatemem(s = pari.stacksize(), sizemax = pari_size_max)

## Creating the field
m = 4*13 # Conductor of the cyclotomic field to be tested, you can try to change it
print("Cyclotomic field of conductor m = ", m)
L.<z> = CyclotomicField(m)
OL = L.maximal_order()

## Generating the input of Gentry-Szydlo
s = OL.random_element(-100,100)

I = OL.fractional_ideal(s)
I = OL.fractional_ideal(I.gens_two()) ## make sure that sage forgets that I is a principal ideal generated by s

x = s*s.conjugate()

## Running the Gentry-Szydlo algorithm and comparing with sage's build in principal ideal solver (PIP)
print("The secret to recover is s =", s)
print("\nStarting Gentry-Szydlo's algorithm...")
t1 = time.time()
res = gentry_szydlo(I,x,L,path_to_pari = path_to_pari) # you may add verbose = True, if you want to have some intermediate comments
t2 = time.time()
print("...end of Gentry-Szydlo's algorithm")
print("Gentry-Szydlo algorithm took time:", Reals(20)(t2-t1),"seconds")
print("\nStarting Sage's PIP solver...")
t1 = time.time()
res_PIP = I.gens_reduced(proof = false)[0] ## make sure that sage's function to compute a generator of a principal ideal is not faster
t2 = time.time()
print("...end of Sage's PIP solver")
print("Sage's PIP solver algorithm took time:", Reals(20)(t2-t1),"seconds")

print("\nGentry-Szydlo algorithm computed the element res =", res)
print("Check that res is a generator of I:", I == OL.fractional_ideal(res))
print("Check that res*bar(res) = x:", res*res.conjugate() == x)
print("Quotient s/res should be a root of unity:", s/res)
